# Meta data about this cluster setup
meta:
  product_name: cratedb

  hosts: ${infrastructure_provisioning.out.mongod.1.private_ip}:4200
  host: ${cluster_setup.meta.hostname}:${cluster_setup.meta.port}
  hostname: ${infrastructure_provisioning.out.mongod.1.private_ip}
  connection_string: ${infrastructure_provisioning.out.mongod.1.private_ip}:4200
  port: 4200


#tar_file_url: https://cdn.crate.io/downloads/releases/cratedb/x64_linux/crate-5.6.2.tar.gz

tar_file_url: https://cdn.crate.io/downloads/releases/cratedb/x64_linux/crate-5.7.1.tar.gz

node_config_file:
  remote_path: data/crate/config/crate.yml
  content: |
    path:
      data: data
      logs: logs
    network:
      host: _site_

    # Client access and authentication is then configured via the host based
    # config, a map of remote client access entries.
    # The following example is a sane configuration that covers a common use case:
    # * The predefined superuser `crate` has trusted access from localhost.
    # * All other users require username/password authentication from anywhere.
    #   Note that this authentication method is only available via Postgres
    #   Protocol, meaning that with this configuration, connecting from non-local
    #   hosts via HTTP would not be possible!
    auth:
      host_based:
        config:
          0:
            user: crate
            address: _site_
            method: trust
          99:
            method: password

topology:
  - cluster_type: standalone
    id: mynode0
    node:
      # Note: md0 will be used for the tsbs data files and isn't itself part of a topology
      - public_ip: ${infrastructure_provisioning.out.mongod.1.public_ip}
        private_ip: ${infrastructure_provisioning.out.mongod.1.private_ip}
