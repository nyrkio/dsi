task_name: ycsb
run:
  - id: ycsb_load
    type: ycsb
    cmd: >
      cd YCSB/;
      ${infrastructure_provisioning.numactl_prefix} ./bin/ycsb.sh load ${test_control.product.${cluster_setup.meta.product_name}.ycsb.binding_name} -s
      -P ../workloadEvergreen
      -P ../db.properties
      -threads 64;
    config_filename: workloadEvergreen
    workload_config: |
      recordcount=5000000
      operationcount=20000000
      workload=site.ycsb.workloads.CoreWorkload
      readallfields=true
      readproportion=1.0
      updateproportion=0.0
      scanproportion=0
      insertproportion=0.0
      requestdistribution=zipfian

  - id: ycsb_100read
    type: ycsb
    cmd: >
      cd YCSB/;
      for level in 1 2 4 8 16 32 64 128; do
        ${infrastructure_provisioning.numactl_prefix} ./bin/ycsb.sh run ${test_control.product.${cluster_setup.meta.product_name}.ycsb.binding_name} -s \
        -P ../workloadEvergreen_100read \
        -P ../db.properties \
        -threads $level;
      done
    config_filename: workloadEvergreen_100read
    workload_config: |
      recordcount=5000000
      operationcount=20000000
      maxexecutiontime=240
      workload=site.ycsb.workloads.CoreWorkload
      readallfields=true
      readproportion=1.0
      updateproportion=0.0
      scanproportion=0
      insertproportion=0.0
      requestdistribution=zipfian

  - id: ycsb_95read5update
    type: ycsb
    cmd: >
      cd YCSB/;
      for level in 1 2 4 8 16 32 64; do
        ${infrastructure_provisioning.numactl_prefix} ./bin/ycsb.sh run ${test_control.product.${cluster_setup.meta.product_name}.ycsb.binding_name} -s \
        -P ../workloadEvergreen_95read5update \
        -P ../db.properties \
        -threads $level;
      done
    config_filename: workloadEvergreen_95read5update
    workload_config: |
      recordcount=5000000
      operationcount=20000000
      maxexecutiontime=240
      workload=site.ycsb.workloads.CoreWorkload
      readallfields=true
      readproportion=0.95
      updateproportion=0.05
      scanproportion=0
      insertproportion=0.0
      requestdistribution=zipfian

  - id: ycsb_100update
    type: ycsb
    cmd: >
      cd YCSB/;
      for level in 1 2 4 8 16 32 64; do
        ${infrastructure_provisioning.numactl_prefix} ./bin/ycsb.sh run ${test_control.product.${cluster_setup.meta.product_name}.ycsb.binding_name} -s \
        -P ../workloadEvergreen_100update \
        -P ../db.properties \
        -threads $level;
      done
    config_filename: workloadEvergreen_100update
    workload_config: |
      recordcount=5000000
      operationcount=20000000
      maxexecutiontime=240
      workload=site.ycsb.workloads.CoreWorkload
      readallfields=true
      readproportion=0
      updateproportion=1.0
      scanproportion=0
      insertproportion=0.0
      requestdistribution=zipfian

  - id: ycsb_50read50update
    type: ycsb
    cmd: >
      cd YCSB/;
      for level in 1 2 4 8 16 32 64; do
        ${infrastructure_provisioning.numactl_prefix} ./bin/ycsb.sh run ${test_control.product.${cluster_setup.meta.product_name}.ycsb.binding_name} -s \
        -P ../workloadEvergreen_50read50update \
        -P ../db.properties \
        -threads $level;
      done
    config_filename: workloadEvergreen_50read50update
    workload_config: |
      recordcount=5000000
      operationcount=20000000
      maxexecutiontime=240
      workload=site.ycsb.workloads.CoreWorkload
      readallfields=true
      readproportion=0.5
      updateproportion=0.5
      scanproportion=0
      insertproportion=0.0
      requestdistribution=zipfian



  - id: fio
    type: fio
    cmd: '${infrastructure_provisioning.numactl_prefix} ./fio-test.sh ${cluster_setup.meta.hostname}'
    config_filename: fio.ini
    output_files:
      - fio.json
      - fio_results.tgz
    workload_config: ${test_control.common_fio_config}
    skip_validate: true

  - id: iperf
    type: iperf
    cmd: '${infrastructure_provisioning.numactl_prefix} ./iperf-test.sh ${cluster_setup.meta.hostname}'
    output_files:
      - iperf.json
    skip_validate: true


pre_task:
  - on_workload_client:
      upload_files:
        - target: db.properties
          content: ${test_control.product.${cluster_setup.meta.product_name}.ycsb.dbproperties}


  - on_workload_client:
      exec_client_shell:
        connection_string: ${cluster_setup.product.${cluster_setup.meta.product_name}.meta.connection_string}
        script: ${test_control.product.${cluster_setup.meta.product_name}.ycsb.create_table_script}

between_tests:
  - restart_cluster:
      clean_logs: true
      clean_db_dir: false
